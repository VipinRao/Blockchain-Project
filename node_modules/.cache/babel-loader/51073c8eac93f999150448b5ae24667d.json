{"ast":null,"code":"import _regeneratorRuntime from \"/home/vipin2017uco1581/Documents/blockchain-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/vipin2017uco1581/Documents/blockchain-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/vipin2017uco1581/Documents/blockchain-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/home/vipin2017uco1581/Documents/blockchain-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/vipin2017uco1581/Documents/blockchain-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/home/vipin2017uco1581/Documents/blockchain-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/vipin2017uco1581/Documents/blockchain-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/vipin2017uco1581/Documents/blockchain-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/vipin2017uco1581/Documents/blockchain-project/src/components/App.js\";\nimport React, { Component } from 'react';\nimport ipfs from './ipfs';\nimport Web3 from 'web3';\nimport Healthcare from '../abis/Healthcare.json';\nimport AddToIpfs from './AddToIpfs';\nimport Register_Patient from './Register_Patient';\nimport Display_Data from './Display_Data';\nimport Hospital from './Hospital';\nimport Metamask from './Metamask';\n\nvar exphbs = require('express-handlebars');\n\nvar app = express();\napp.engine('handlebars', exphbs());\napp.set('view engine', 'handlebars');\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var metamaskInstalled;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // Detect Metamask\n                metamaskInstalled = typeof window.web3 !== 'undefined';\n                this.setState({\n                  metamaskInstalled: metamaskInstalled\n                });\n\n                if (!metamaskInstalled) {\n                  _context.next = 7;\n                  break;\n                }\n\n                _context.next = 5;\n                return this.loadWeb3();\n\n              case 5:\n                _context.next = 7;\n                return this.loadBlockchainData();\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context2.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                _context2.next = 7;\n                break;\n\n              case 6:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {// DO NOTHING...\n                }\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var web3, accounts, networkId, networkData, healthcare;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                web3 = window.web3; // Load account\n\n                _context3.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context3.sent;\n                // get all acocounts \n                this.setState({\n                  account: accounts[0]\n                }); // using the cuurent active account .... make account address accessable to calling obejct\n\n                _context3.next = 7;\n                return web3.eth.net.getId();\n\n              case 7:\n                networkId = _context3.sent;\n                _context3.next = 10;\n                return Healthcare.networks[networkId];\n\n              case 10:\n                networkData = _context3.sent;\n\n                if (!networkData) {\n                  _context3.next = 25;\n                  break;\n                }\n\n                _context3.next = 14;\n                return web3.eth.Contract(Healthcare.abi, networkData.address);\n\n              case 14:\n                healthcare = _context3.sent;\n                this.setState({\n                  healthcare: healthcare\n                }); //same as {healthcare : healthcare} -> healthcare can be accessed from all-over app.js \n\n                _context3.next = 18;\n                return this.state.healthcare.methods.HospitalDetail(this.state.account).call({\n                  from: this.state.account\n                });\n\n              case 18:\n                this.state.Hospital_Details = _context3.sent;\n                _context3.next = 21;\n                return this.state.healthcare.methods.checkOwner().call({\n                  from: this.state.account\n                });\n\n              case 21:\n                this.state.owner = _context3.sent;\n                this.setState({\n                  loading: false\n                });\n                _context3.next = 26;\n                break;\n\n              case 25:\n                window.alert('Contract not deployed to detected network. Try changing it to Ropsten network');\n\n              case 26:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      account: '',\n      owner: false,\n      loading: true,\n      Hospital_Details: null,\n      metamaskInstalled: false,\n      buffer: null,\n      print: false,\n      display_msg: React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }),\n      ipfsLink: 'https://ipfs.infura.io/ipfs/'\n    };\n    _this.captureFile = _this.captureFile.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onSubmit = _this.onSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.Register = _this.Register.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.HospitalInformation = _this.HospitalInformation.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.CheckID = _this.CheckID.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"captureFile\",\n    value: function captureFile(event) {\n      var _this2 = this;\n\n      event.preventDefault();\n      var file = event.target.files[0];\n      var reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = function () {\n        _this2.setState({\n          buffer: Buffer(reader.result)\n        });\n\n        console.log('buffer', _this2.state.buffer);\n      };\n    }\n  }, {\n    key: \"onSubmit\",\n    value: function onSubmit(event) {\n      var _this3 = this;\n\n      this.setState({\n        loading: true\n      });\n      console.log(\"Submitting file to ipfs...\");\n      ipfs.add(this.state.buffer, function (error, result) {\n        console.log('Ipfs result', result);\n\n        if (error) {\n          console.error(error);\n          return;\n        }\n\n        _this3.state.healthcare.methods.addRecords(Number(event), _this3.state.ipfsLink + result[0].hash, new Date().toString()).send({\n          from: _this3.state.account\n        }).once('receipt', function (receipt) {\n          window.alert('Medical History Updated Successfully');\n\n          _this3.setState({\n            Hash: result[0].hash\n          });\n        });\n\n        _this3.setState({\n          loading: false\n        });\n      });\n    }\n  }, {\n    key: \"Register\",\n    value: function Register(name, _id, dob, bloodgrp) {\n      this.setState({\n        loading: true\n      });\n      console.log(\"Registering Patient Details\");\n      this.state.healthcare.methods.addPatient(_id, name, dob, bloodgrp).send({\n        from: this.state.account\n      });\n      this.setState({\n        loading: false\n      });\n    }\n  }, {\n    key: \"HospitalInformation\",\n    value: function HospitalInformation(address) {\n      this.setState({\n        loading: true\n      });\n      console.log(\"Fetching Hospital Details\");\n      var temp = this.state.healthcare.methods.HospitalDetail(address).call({\n        from: this.state.account\n      });\n      this.setState({\n        Hospital_Info: temp\n      });\n      this.setState({\n        loading: false\n      });\n    }\n  }, {\n    key: \"CheckID\",\n    value: function CheckID(p_id) {\n      var temp = this.state.healthcare.methods.checkID(p_id).call({\n        from: this.state.account\n      });\n      return temp;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      var content;\n      var loading;\n\n      if (this.state.metamaskInstalled === false && this.state.loading === false) {\n        window.alert('Install Metamask!!!');\n        content = React.createElement(\"h1\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 141\n          },\n          __self: this\n        }, \" Please Install Metamask !!! Reload After Installing\");\n      }\n\n      if (this.state.loading) {\n        loading = React.createElement(\"div\", {\n          className: \"my-5 text-center\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 144\n          },\n          __self: this\n        }, React.createElement(\"h1\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 144\n          },\n          __self: this\n        }, \"Loading... And Make Sure MetaMask is Installed\"));\n      } else if (this.state.loading === false && this.state.metamaskInstalled === true) {\n        if (this.state.owner === true) {\n          content = React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 151\n            },\n            __self: this\n          }, React.createElement(\"p\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 152\n            },\n            __self: this\n          }, \"  Your Unique Address : \", this.state.account), React.createElement(\"h3\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 154\n            },\n            __self: this\n          }, \" Welcome \", this.state.Hospital_Details.hname, \"!!! \"), React.createElement(\"p\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 155\n            },\n            __self: this\n          }, \" Address : \", this.state.Hospital_Details.hadd, \", \", this.state.Hospital_Details.hcity, \", \", this.state.Hospital_Details.hcountry, \" \"), React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 157\n            },\n            __self: this\n          }, React.createElement(Register_Patient, {\n            Register: this.Register,\n            CheckID: this.CheckID,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 159\n            },\n            __self: this\n          })), React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 163\n            },\n            __self: this\n          }, React.createElement(AddToIpfs, {\n            Patient_id: this.state.Patient_id,\n            buffer: this.state.buffer,\n            captureFile: this.captureFile,\n            onSubmit: this.onSubmit,\n            CheckID: this.CheckID,\n            healthcare: this.state.healthcare,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 164\n            },\n            __self: this\n          })), React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 174\n            },\n            __self: this\n          }, React.createElement(\"h3\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 175\n            },\n            __self: this\n          }, \" Retrieve Patient's Medical History \"), React.createElement(\"form\", {\n            onSubmit: function onSubmit(event) {\n              event.preventDefault();\n\n              _this4.CheckID(Number(_this4.p_id.value)).then(function (result) {\n                if (result === true) {\n                  _this4.setState({\n                    print: true,\n                    display_msg: React.createElement(\"h5\", {\n                      __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 182\n                      },\n                      __self: this\n                    }),\n                    p_id: Number(_this4.p_id.value)\n                  });\n                } else {\n                  _this4.setState({\n                    print: false,\n                    display_msg: React.createElement(\"h5\", {\n                      __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 188\n                      },\n                      __self: this\n                    }, \"Invalid Patient ID\")\n                  });\n                }\n              });\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 176\n            },\n            __self: this\n          }, React.createElement(\"input\", {\n            id: \"p_id\",\n            type: \"text\",\n            ref: function ref(input) {\n              _this4.p_id = input;\n            },\n            placeholder: \"Enter Patient ID\",\n            required: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 193\n            },\n            __self: this\n          }), React.createElement(\"button\", {\n            type: \"submit\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 198\n            },\n            __self: this\n          }, \"SUBMIT\")), this.state.print ? React.createElement(Display_Data, {\n            healthcare: this.state.healthcare,\n            p_id: this.state.p_id,\n            account: this.state.account,\n            CheckID: this.CheckID,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 201\n            },\n            __self: this\n          }) : React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 205\n            },\n            __self: this\n          }), this.state.display_msg));\n        } else {\n          content = React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 213\n            },\n            __self: this\n          }, React.createElement(\"p\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 214\n            },\n            __self: this\n          }, \"  Your Unique Address : \", this.state.account), React.createElement(\"h2\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 215\n            },\n            __self: this\n          }, \" Hi, Seems that your Unique address does not have a permission to enter further. \"));\n        }\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }, this.state.loading ? loading : content, this.state.account ? React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      }, \" Get Hospital's Details using its Unique Address \"), React.createElement(\"form\", {\n        onSubmit: function onSubmit(event) {\n          event.preventDefault();\n\n          _this4.setState({\n            h_id: _this4.h_id.value\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        id: \"h_id\",\n        type: \"text\",\n        ref: function ref(input) {\n          _this4.h_id = input;\n        },\n        placeholder: \"E.g. 0x692991888659c3e8Ad043B262B0AF97415eA4aDB\",\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        },\n        __self: this\n      }, \"SUBMIT\")), this.state.h_id ? React.createElement(Hospital, {\n        healthcare: this.state.healthcare,\n        h_id: this.state.h_id,\n        account: this.state.account,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242\n        },\n        __self: this\n      }) : React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245\n        },\n        __self: this\n      }, \"  \")) : React.createElement(Metamask, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component); // app.use(PORT,() = > {\n//   console.log()\n// })\n\n\nexport default App;","map":{"version":3,"sources":["/home/vipin2017uco1581/Documents/blockchain-project/src/components/App.js"],"names":["React","Component","ipfs","Web3","Healthcare","AddToIpfs","Register_Patient","Display_Data","Hospital","Metamask","exphbs","require","app","express","engine","set","App","metamaskInstalled","window","web3","setState","loadWeb3","loadBlockchainData","ethereum","enable","currentProvider","eth","getAccounts","accounts","account","net","getId","networkId","networks","networkData","Contract","abi","address","healthcare","state","methods","HospitalDetail","call","from","Hospital_Details","checkOwner","owner","loading","alert","props","buffer","print","display_msg","ipfsLink","captureFile","bind","onSubmit","Register","HospitalInformation","CheckID","event","preventDefault","file","target","files","reader","FileReader","readAsArrayBuffer","onloadend","Buffer","result","console","log","add","error","addRecords","Number","hash","Date","toString","send","once","receipt","Hash","name","_id","dob","bloodgrp","addPatient","temp","Hospital_Info","p_id","checkID","content","hname","hadd","hcity","hcountry","Patient_id","value","then","input","h_id"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport ipfs from './ipfs'\nimport Web3 from 'web3'\nimport Healthcare from '../abis/Healthcare.json'\nimport AddToIpfs from './AddToIpfs'\nimport Register_Patient from './Register_Patient'\nimport Display_Data from './Display_Data'\nimport Hospital from './Hospital'\nimport Metamask from './Metamask'\nvar exphbs  = require('express-handlebars');\n \nvar app = express();\n \napp.engine('handlebars', exphbs());\napp.set('view engine', 'handlebars');\n\nclass App extends Component {\n\n  async componentWillMount() {\n    // Detect Metamask\n    const metamaskInstalled = typeof window.web3 !== 'undefined'\n    this.setState({ metamaskInstalled : metamaskInstalled })\n    if(metamaskInstalled) {\n      await this.loadWeb3()\n      await this.loadBlockchainData()\n    }\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      // DO NOTHING...\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n    // Load account\n    const accounts = await web3.eth.getAccounts() // get all acocounts \n    this.setState({ account: accounts[0] })  // using the cuurent active account .... make account address accessable to calling obejct\n    const networkId = await web3.eth.net.getId()  // netork id retrieve\n    // Healthcare contains smart contract named healthcare  properties in json format\n    const networkData =  await Healthcare.networks[networkId] // get all network where smart contract is deployed\n    if(networkData){\n      const healthcare = await web3.eth.Contract(Healthcare.abi, networkData.address)\n      this.setState({ healthcare }) //same as {healthcare : healthcare} -> healthcare can be accessed from all-over app.js \n      this.state.Hospital_Details = await this.state.healthcare.methods.HospitalDetail(this.state.account).call({from : this.state.account})  // from : this.state.acoount is the address of node calling smart constract and the other addreess is the argument\n      this.state.owner = await this.state.healthcare.methods.checkOwner().call({from: this.state.account})\n      this.setState({loading : false})\n       }\n    else{\n      window.alert('Contract not deployed to detected network. Try changing it to Ropsten network')\n    }\n\n  }\n\n    constructor(props) { \n    super(props)\n    this.state = {\n      account: '',\n      owner: false,\n      loading: true,\n      Hospital_Details : null,\n      metamaskInstalled: false,\n      buffer : null,\n      print : false,\n      display_msg : <h5></h5>,\n      ipfsLink: 'https://ipfs.infura.io/ipfs/'\n    }\n    this.captureFile = this.captureFile.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.Register = this.Register.bind(this);\n    this.HospitalInformation = this.HospitalInformation.bind(this);\n    this.CheckID = this.CheckID.bind(this);\n  }\n\n\n\ncaptureFile(event){\n    event.preventDefault()\n    const file = event.target.files[0]\n    const reader = new window.FileReader()\n    reader.readAsArrayBuffer(file)\n    reader.onloadend = () => {\n      this.setState({ buffer: Buffer(reader.result) })\n      console.log('buffer', this.state.buffer)\n    }\n\n  }\n\n  onSubmit(event){\n    this.setState({loading : true})\n    console.log(\"Submitting file to ipfs...\")\n    ipfs.add(this.state.buffer, (error, result) => {\n      console.log('Ipfs result', result)\n      if(error) {\n        console.error(error)\n        return\n      }\n       this.state.healthcare.methods.addRecords(Number(event),this.state.ipfsLink+result[0].hash, (new Date()).toString()).send({ from: this.state.account })\n       .once('receipt', (receipt) => {\n        window.alert('Medical History Updated Successfully')\n          this.setState({ Hash: result[0].hash })\n       })\n       this.setState({loading : false})\n    })  \n  \n  }\n\n  Register(name , _id, dob, bloodgrp){\n    this.setState({loading : true})\n    console.log(\"Registering Patient Details\")\n    this.state.healthcare.methods.addPatient(_id,name,dob,bloodgrp).send({from :this.state.account}) \n    this.setState({loading : false})\n  }\n\n  HospitalInformation(address){\n    this.setState({loading : true})\n    console.log(\"Fetching Hospital Details\")\n    const temp = this.state.healthcare.methods.HospitalDetail(address).call({from : this.state.account})\n    this.setState({Hospital_Info : temp})\n    this.setState({loading : false})\n  }\n\n  CheckID(p_id){\n      const temp = this.state.healthcare.methods.checkID(p_id).call({from : this.state.account})\n      return temp;  \n  }\n\n  render() {\n  let content\n  let loading\n    if(this.state.metamaskInstalled === false && this.state.loading === false){\n      window.alert('Install Metamask!!!')\n      content = <h1> Please Install Metamask !!! Reload After Installing</h1>\n    }\n      if(this.state.loading) {\n      loading = <div className=\"my-5 text-center\"><h1>Loading... And Make Sure MetaMask is Installed</h1></div>\n    } \n\n    else if(this.state.loading === false && this.state.metamaskInstalled === true){\n      if(this.state.owner === true){\n\n\n      content = <div>\n                 <p>  Your Unique Address : {this.state.account}</p>\n\n       <h3> Welcome {this.state.Hospital_Details.hname}!!! </h3>\n      <p> Address : {this.state.Hospital_Details.hadd}, {this.state.Hospital_Details.hcity}, {this.state.Hospital_Details.hcountry} </p>\n\n            <div>\n\n              <Register_Patient\n                  Register = {this.Register}\n                  CheckID = {this.CheckID} />\n            </div>\n            <div>\n             <AddToIpfs\n                  Patient_id = {this.state.Patient_id}\n                  buffer ={this.state.buffer}\n                  captureFile={this.captureFile}\n                  onSubmit={this.onSubmit}\n                  CheckID ={this.CheckID} \n                  healthcare={this.state.healthcare}/>\n            </div>\n\n\n            <div>\n              <h3> Retrieve Patient's Medical History </h3>\n              <form onSubmit = {(event)=>{\n                event.preventDefault()\n                this.CheckID(Number(this.p_id.value))\n                  .then((result) =>{\n                     if(result === true){\n                        this.setState({print :true,\n                          display_msg : <h5></h5>,\n                          p_id : Number(this.p_id.value)\n                        })\n                      }\n                      else{\n                        this.setState({print : false ,\n                          display_msg : <h5>Invalid Patient ID</h5>\n                        })\n                      }\n                  })\n              }} >\n                <input id=\"p_id\"\n                  type = \"text\" \n                  ref={(input) => { this.p_id = input }}\n                  placeholder=\"Enter Patient ID\"\n                  required />\n                  <button type=\"submit\">SUBMIT</button>\n              </form>\n              {this.state.print ?\n                <Display_Data\n                    healthcare = {this.state.healthcare} \n                    p_id = {this.state.p_id}\n                    account ={this.state.account}\n                    CheckID = {this.CheckID} /> : <div></div>\n              }\n              {this.state.display_msg}\n            </div>\n          </div>\n                  \n        \n    } else {\n      content =<div>\n                 <p>  Your Unique Address : {this.state.account}</p>\n           <h2> Hi, Seems that your Unique address does not have a permission to enter further. </h2>\n           </div>\n    }\n  }\n\n  \n\n    return (      \n\n        <div>\n            { this.state.loading ? loading : content } \n           \n           {this.state.account ?\n          <div>\n              <h3> Get Hospital's Details using its Unique Address </h3>\n              <form onSubmit = {(event)=>{\n                event.preventDefault()\n               this.setState({h_id : this.h_id.value})\n              }} >\n                <input id=\"h_id\"\n                  type = \"text\" \n                  ref={(input) => { this.h_id = input }}\n                  placeholder=\"E.g. 0x692991888659c3e8Ad043B262B0AF97415eA4aDB\"\n                  required />\n                  <button type=\"submit\">SUBMIT</button>\n              </form>\n              {this.state.h_id ?\n                <Hospital\n                    healthcare = {this.state.healthcare} \n                    h_id = {this.state.h_id}\n                    account ={this.state.account} /> : <div>  </div>\n              }\n            </div>\n            : <Metamask />\n            }\n        </div> \n    );\n  }\n}\n \n\n// app.use(PORT,() = > {\n//   console.log()\n// })\nexport default App;"]},"metadata":{},"sourceType":"module"}